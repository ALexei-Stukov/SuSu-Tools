#ifndef THREAD_CONTROLER
#define THREAD_CONTROLER

#include "Thread_Object"

#ifndef SUSU_THREAD_POOL_INIT_COUNT
    #define max_count 256
    #define min_count 1
#endif

//#include <iostream>
//using namespace std;

namespace susu_tools{

class Thread_Controler{
public:
    static Thread_Controler* get_Thread_Controler();
    static ::std::mutex init_mutex;
    static void set_init_count(int n);
    static int init_count;

    
    template<class F, class... Args>
    int add_task(F&& f, Args&&...args);
    
    int load_balance();
    int allocate_index=0; // load_alance() will set the allocate_index

    void dynamic_expansion_reduction();
    int dynamic_param = 1;  //a param about the dynamic_expansion_reduction,if this param is 0,then Thread will not change the thread count;

    bool expansion_check(){ //thread poll will init a new thread if this function return true
        
        if(dynamic_param == 0)
        {return false;}

        int sum_thread_task_count = 0;
        int sum_thread_count = 0;
        for(auto it = workers.begin();it != workers.end();it++)
        {
            sum_thread_task_count += (*it)->get_thread_task_count();
            sum_thread_count++;
        }
        
        //if sqrt(sum_thread_task_count)/dynamic_param > sum_thread_count, init a new thread
        
        int temp = (sum_thread_task_count >> 1)/dynamic_param - sum_thread_count;
        if(temp > 0)
        {return true;}
        else
        {return false;}
    }

    int thread_count = 0; // dynamic_expansion() will add or reduce the thread_count
    int thread_low_limit = 1;
    int thread_up_limit = 999;
    
    void set_dynamic_param(int n){
        int temp = n;
        if(temp > max_count)
        {temp = max_count;}

        if(temp < min_count)
        {temp = min_count;}

        dynamic_param = temp;
    }
    int get_dynamic_param(){return dynamic_param;}

    void set_thread_low_limit(int n){
        int temp = n;
        if(temp > max_count)
        {temp = max_count;}

        if(temp < min_count)
        {temp = min_count;}

        thread_low_limit = temp;
    }
    int get_thread_low_limit(){return thread_low_limit;}

    void set_thread_up_limit(int n){
        int temp = n;
        if(temp > max_count)
        {temp = max_count;}

        if(temp < min_count)
        {temp = min_count;}

        thread_up_limit = temp;
    }
    int get_thread_up_limit(){return thread_up_limit;}

private:
    Thread_Controler();
    ~Thread_Controler();

    void add_a_thread();

    ::std::vector<Thread_Object*> workers;
    ::std::vector<::std::thread> threads;

    ::std::thread Load_Balance; //use to check thread
    ::std::mutex Load_Balance_MUTEX; //use to check thread;

    ::std::thread Dynamic_Expansion; //use to check thread
    ::std::mutex Dynamic_Expansion_MUTEX; //use to change thread counts;
};

template<class F, class... Args>
int Thread_Controler::add_task(F&& f, Args&&...args)
{
    int ret = 0;
    Dynamic_Expansion_MUTEX.lock();
        ret = workers[allocate_index]->add_task(::std::forward<F>(f), ::std::forward<Args>(args)...);
        load_balance();
    Dynamic_Expansion_MUTEX.unlock();
    
    return ret;
}     
}
#endif